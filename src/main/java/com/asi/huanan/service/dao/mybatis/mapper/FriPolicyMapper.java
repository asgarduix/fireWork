package com.asi.huanan.service.dao.mybatis.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import com.asi.huanan.service.dao.mybatis.model.FriPolicy;
import com.asi.huanan.service.dao.mybatis.model.FriPolicyExample;
import com.asi.huanan.service.dao.mybatis.model.FriPolicyKey;
import com.asi.huanan.vo.Rin1304CheckAmtPremRespVO;
import com.asi.huanan.vo.Rin1304DdlCurncyListVOResp;
import com.asi.huanan.vo.Rin1304FriPolicyVOResp;
import com.asi.huanan.vo.Rin1304QueryAcctFlagRespVO;
import com.asi.huanan.vo.Rin1304VO;

public interface FriPolicyMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    long countByExample(FriPolicyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int deleteByExample(FriPolicyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int deleteByPrimaryKey(FriPolicyKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int insert(FriPolicy record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int insertSelective(FriPolicy record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    List<FriPolicy> selectByExample(FriPolicyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    FriPolicy selectByPrimaryKey(FriPolicyKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int updateByExampleSelective(@Param("record") FriPolicy record, @Param("example") FriPolicyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int updateByExample(@Param("record") FriPolicy record, @Param("example") FriPolicyExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int updateByPrimaryKeySelective(FriPolicy record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table fri_policy
     *
     * @mbg.generated Mon Nov 08 11:43:23 CST 2021
     */
    int updateByPrimaryKey(FriPolicy record);
    
    
   
    
    
    /**
     * 
     * Rin130_臨分分入，保批單主檔查詢結果
     * @param policyNo
     * @param endorseNo
     * @return
     */
    @Select({"<script>",
    		"Select fpa.addition_no as numAddition_no ,fp.policy_no as txtpolicy_no, fp.endorse_no as txtendorse_no, \n",
    		"fp.old_policy as txtold_policy, fp.nature_flag as txtnature_flag,\n",
    		"fp.cinsurant as txtcinsurant, fp.einsurant as txteinsurant, fp.ifloat as txtifloat,\n ",
    		"fp.policy_dbgn as txtpolicy_dbgn,\n",
    		"fp.policy_dend as txtpolicy_dend, fp.policy_dprt as txtpolicy_dprt, fp.policy_type as txtpolicy_type, \n",
    		"fp.policy_year as txtpolicy_year,\n",
    		"fp.fire_type as txtfire_type, fp.irate_type as txtirate_type, fp.coins_flag as txtcoins_flag,\n ",
    		"fp.coins_rate as txtcoins_rate,\n",
    		"fpa.amt as numamt, \n",
    		"fpa.prem as numprem , \n",
    		"fp.all_amt as numall_amt, \n",
    		"fp.all_prem as numall_prem, \n",
    		"fp.com_amt  as numcom_amt , \n",
    		"fp.com_prem as numcom_prem, \n",
    		"fp.comm_rate as numcomm_rate , \n",
    		"fp.comm as numcomm , \n",
    		"fp.amt as num_amt_hn ,\n",
    		"fp.prem as num_prem_hn ,\n",
    		"fp.prepay_rate as numprepay_rate,fp.end_reason as txtend_reason ,fp.calc_flag as txtcalc_flag,\n",
    		"fp.ref_no as txtref_no ,fp.ri_policyno as txtRi_policyno,fp.change_flag as txtchange_flag,\n",
    		"fp.fac_flag as txtFac_flag,fp.policy_mode as txtpolicy_mode , \n",
    		"fp.AccEnterDate as dtaAccEnterDate ,fp.AccCloseDate as dtaAccCloseDate, fp.Broker_id as txtBroker_id ,fp.Receive_date as dtaReceive_date, \n",
    		"fp.currency as txtcurrency, fp.CurrencyExchangeRate as txtCurrencyExchangeRate, fp.org_prem as numorg_prem,\n",
    		"fp.mkovse as txtMkovse,fp.AccTransferState as txtAccTransferState, fp.office as txtOffice, \n",
    		"fp.CountryID as txtCountryID,fp.org_comm as numorg_comm ,fp.Rin_com_id as txtRin_com_id ,fp.txtOfficer1 as txttxtOfficer1,fp.txtOfficer2 as txttxtOfficer2,fc.ename as txtcname \n",
    		"from fri_policy fp \n",
    		"left join fri_policy_addition fpa on fp.policy_no =fpa.policy_no and fp.endorse_no=fpa.endorse_no \n ",
    		"left join fri_com fc on fc.rin_com_id=fp.Rin_com_id \n",
    		"where 1=1 ",
    		" AND fp.policy_no=#{policyNo,jdbcType=VARCHAR}\n",
    		" AND fp.endorse_no= #{endorseNo,jdbcType=VARCHAR} \n",
    		"</script>"})
//    @Select("<script> Select fpa.addition_no as numAddition_no ,fp.policy_no as txtpolicy_no, fp.endorse_no as txtendorse_no, \n fp.old_policy as txtold_policy, fp.nature_flag as txtnature_flag,\n fp.cinsurant as txtcinsurant, fp.einsurant as txteinsurant, fp.ifloat as txtifloat,\n fp.policy_dbgn as txtpolicy_dbgn,\n fp.policy_dend as txtpolicy_dend, fp.policy_dprt as txtpolicy_dprt, fp.policy_type as txtpolicy_type, \n fp.policy_year as txtpolicy_year,\n fp.fire_type as txtfire_type, fp.irate_type as txtirate_type, fp.coins_flag as txtcoins_flag,\n fp.coins_rate as txtcoins_rate,\n fpa.amt as numamt, \n fpa.prem as numprem , \n fp.all_amt as numall_amt, \n fp.all_prem as numall_prem, \n fp.com_amt  as numcom_amt , fp.comm as numcomm, fp.com_prem as numcom_prem, \n fp.comm_rate as numcomm_rate , \n fp.amt as num_amt_hn ,\n fp.prem as num_prem_hn ,\n fp.prepay_rate as numprepay_rate,fp.end_reason as txtend_reason ,fp.calc_flag as txtcalc_flag,\n fp.ref_no as txtref_no ,fp.ri_policyno as txtRi_policyno,fp.change_flag as txtchange_flag,\n fp.fac_flag as txtFac_flag,fp.policy_mode as txtpolicy_mode , \n fp.rin_com_id as txtRin_com_id,fp.txtOfficer1 as txttxtOfficer1,fp.txtOfficer2 as txttxtOfficer2, \n fp.AccEnterDate as dtaAccEnterDate ,fp.AccCloseDate as dtaAccCloseDate, fp.Broker_id as txtBroker_id ,fp.Receive_date as dtaReceive_date, \n fp.currency as txtcurrency, fp.CurrencyExchangeRate as txtCurrencyExchangeRate, fp.org_prem as numorg_prem,\n fp.mkovse as txtMkovse,fp.AccTransferState as txtAccTransferState, fp.office as txtOffice, \n fp.CountryID as txtCountryID,fp.org_comm as numorg_comm \n from fri_policy fp \n left join fri_policy_addition fpa on fp.policy_no =fpa.policy_no and fp.endorse_no=fpa.endorse_no \n where 1=1 AND fp.policy_no=#{policyNo,jdbcType=VARCHAR}   \n  AND fp.endorse_no= #{endorseNo,jdbcType=VARCHAR} \n </script>")
    List<Rin1304FriPolicyVOResp> queryPolicyByPrimaryKey(@Param("policyNo") String policyNo,@Param("endorseNo") String endorseNo);
    
    /**
     * Rin1304_臨分分入，用「保單號碼」和「批單號碼」刪除保批單主檔
     * @param policyNo
     * @param endorseNo
     * @return
     */
//    @Delete("<script>"
//    		+"delete from  fri_policy \n"   
//    		+"WHERE  policy_no = #{policyNo,jdbcType=VARCHAR} \n"
//    		+"AND endorse_no = #{endorseNo,jdbcType=VARCHAR}\n"
//    		+"</script>")
    @Delete("<script> delete from  fri_policy \n WHERE  policy_no = #{policyNo,jdbcType=VARCHAR} \n AND endorse_no = #{endorseNo,jdbcType=VARCHAR}\n </script>")
    int deletePolicyByPrimaryKey (@Param("policyNo") String policyNo,@Param("endorseNo") String endorseNo);

    
    /**
     * Rin1304_臨分分入,判斷是否有資料
     * @param policyNo
     * @param endorseNo
     * @return
     */
//    @Select("<script>"
//     	   +"SELECT policy_no  \n"
//     	   +"from fri_policy \n"
//     	   +"WHERE 1=1 "
//     	   + " <if test=\"policyNo !=null and policyNo !=''\"> AND policy_no=#{policyNo,jdbcType=VARCHAR} </if> \n"
//     	   + " AND endorse_no= #{endorseNo,jdbcType=VARCHAR}  \n"
//     	   +"</script>")
    @Select("<script> SELECT policy_no as policyNo ,endorse_no as endorseNo \n from fri_policy \n WHERE 1=1 <if test=\"policyNo !=null and policyNo !=''\"> AND policy_no=#{policyNo,jdbcType=VARCHAR} </if> \n  AND endorse_no= #{endorseNo,jdbcType=VARCHAR}  \n </script>")
    List<Rin1304VO> queryrin1304(@Param("policyNo") String policyNo,@Param("endorseNo") String endorseNo);

    
    
    /**
     * Rin1304A_臨分分入_檢查是否立帳
     * @param policyNo
     * @param endorseNo
     * @return
     */
//    @Select("<script>"
//    		+"Select acct_flag as acctFlag \n"
//    		+ "from fri_treaty_shares \n"
//    		+ "where policy_no=#{policyNo,jdbcType=VARCHAR} \n"
//    		+ "AND endorse_no=#{endorseNo,jdbcType=VARCHAR}  \n"
//    		+"</script>")
    @Select("<script> Select acct_flag as acctFlag \n from fri_treaty_shares \n where policy_no=#{policyNo,jdbcType=VARCHAR} \n AND endorse_no=#{endorseNo,jdbcType=VARCHAR}  \n </script>")
	List<Rin1304QueryAcctFlagRespVO> checkAcctfFlagIsY(@Param("policyNo") String policyNo,@Param("endorseNo") String endorseNo);

    
    /**
     * Rin1304A_臨分分入_幣別下拉選單
     * @return
     */
//    @Select("<script>"
//    		+"select distinct curncy , ExRate  from mrexpf \n "
//    		+" where  crtdat = \n"
//			+"(select max(crtdat)  From mrexpf  \n"
//			+" where  crtdat &lt;= Getdate()) \n"
//			+" order by curncy "
//    		+"</script>")
    @Select("<script> select distinct curncy , ExRate  from mrexpf \n where  crtdat = \n (select max(crtdat)  From mrexpf  \n where  crtdat &lt;= Getdate()) \n order by curncy </script>")
	List<Rin1304DdlCurncyListVOResp> queryDdlCurncyList();

   
    /**
     * Rin1304A_查詢共保累積保額和共保累積保費
     * @return
     */
    @Select({"<script>select sum(all_amt) as totalAmt,sum(all_prem) as totalPrem from fri_policy where policy_no = #{policyNo,jdbcType=VARCHAR} </script>"})
    List<Rin1304FriPolicyVOResp> querySumAllAmtPremByPolicyNo(@Param("policyNo") String policyNo);
    
   /**
    * Rin1304_新增保批單主檔 by 續保單號
    * @param policyNo
    * @param endorseNo
    * @param oldPolicy
    * @param getPolicyNo
    * @return
    */
@Insert({"<script>Insert into fri_policy \n" , 
   		" (policy_no, endorse_no, cinsurant, einsurant, fire_type, policy_type, policy_year, irate_type, ifloat, \n" , 
   		" policy_dbgn, policy_dend, coins_flag, all_amt, all_prem, amt, prem, com_amt, com_prem, comm, comm_rate, \n" , 
   		" prepay_rate, nature_flag, end_reason, calc_flag, ref_no, policy_dprt, change_flag, policy_mode, coins_rate, \n" , 
   		" old_policy, ri_policyno, rin_com_id, txtOfficer1, txtOfficer2, fac_flag, eqsmin, eqprum, mkovse)	\n" , 
   		" select  DISTINCT  #{policyNo,jdbcType=VARCHAR}   as policy_no,  #{endorseNo,jdbcType=VARCHAR} as endorse_no, \n" , 
   		"   A.cinsurant, A.einsurant, A.fire_type, A.policy_type, A.policy_year, A.irate_type, A.ifloat, A.policy_dbgn,\n" , 
   		"   A.policy_dend, A.coins_flag, A.all_amt, A.all_prem, A.amt, A.prem, A.com_amt, A.com_prem, A.comm, A.comm_rate, A.prepay_rate, \n" + 
   		"   A.nature_flag, A.end_reason, A.calc_flag, A.ref_no, A.policy_dprt, A.change_flag,\n" , 
   		"  case \n" , 
   		"  when A.policy_mode  = '1' \n" ,
   		"      then '5' \n" ,
   		"  else   A.policy_mode end , \n" ,
   		"   A.coins_rate,#{oldPolicy,jdbcType=VARCHAR}  as old_policy, A.ri_policyno, A.rin_com_id, A.txtOfficer1, A.txtOfficer2, \n",
   		"   A.fac_flag, A.eqsmin, A.eqprum, A.mkovse   \n" , 
   		"   from fri_policy A \n" ,
   		"where A.policy_no = #{getPolicyNo,jdbcType=VARCHAR} and A.endorse_no = '' ",
   		"</script>"})
   int insertFriPolicyByOldPolicyNo(@Param("policyNo") String policyNo,@Param("endorseNo") String endorseNo,@Param("oldPolicy") String oldPolicy,@Param("getPolicyNo") String getPolicyNo);

   /**
    * Rin1304_自動產生調整批單號(ADJ)
 * @param policyNo
 * @param endorseNo
 * @param policyDprt
 * @param policyNoADJ
 * @param endorseNoADJ
 * @return
 */
@Insert({"<script>"
	    ,"Insert into fri_policy "
		,"(policy_no, endorse_no, cinsurant, einsurant, fire_type, policy_type, policy_year, irate_type, ifloat, "
		,"policy_dbgn, policy_dend, coins_flag, all_amt, all_prem, amt, prem, com_amt, com_prem, comm, comm_rate, "
		,"prepay_rate, nature_flag, end_reason, calc_flag, ref_no, policy_dprt, change_flag, policy_mode, coins_rate, "
		,"old_policy, ri_policyno, rin_com_id, txtOfficer1, txtOfficer2, fac_flag, eqsmin, eqprum)	"	
	    ,"select #{policyNoADJ,jdbcType=VARCHAR}   as policy_no, #{endorseNoADJ,jdbcType=VARCHAR} as endorse_no, "
		,"A.cinsurant, A.einsurant, A.fire_type, A.policy_type, A.policy_year, A.irate_type, A.ifloat, A.policy_dbgn,"
		,"A.policy_dend, A.coins_flag, A.all_amt*(-1), A.all_prem*(-1), A.amt*(-1), A.prem*(-1), A.com_amt*(-1), A.com_prem*(-1), A.comm*(-1), A.comm_rate, A.prepay_rate, "
		,"A.nature_flag, A.end_reason, A.calc_flag, A.ref_no, #{policyDprt,jdbcType=VARCHAR} as policy_dprt, A.change_flag, "
		,"'5' as Policy_mode, "
		,"A.coins_rate, A.old_policy, A.ri_policyno, A.rin_com_id, A.txtOfficer1, A.txtOfficer2, A.fac_flag, A.eqsmin, A.eqprum   "
	    ," from fri_policy A"
	    ," where A.policy_no = #{policyNo,jdbcType=VARCHAR} and A.endorse_no = #{endorseNo,jdbcType=VARCHAR}"	
   		, "</script>"})
   int createADJpolicy(@Param("policyNo")String policyNo,@Param("endorseNo") String endorseNo, @Param("policyDprt")String policyDprt,@Param("policyNoADJ") String policyNoADJ,
		   @Param("endorseNoADJ")String endorseNoADJ);

  
 /**
  * Rin1304_反算_計算總保額/保費
 * @param policyNo
 * @param endorseNo
 * @return
 */
@Select({"<script>"
	   ,"select sum(amt_flt) + sum(amt_fix) as amtDtl ,sum(prem_flt) + sum(prem_fix)  + sum(prem_typ) + sum(prem_ear) as premDtl,0 as amt,0 as prem "
	   ,"from fri_policy_dtl" 
	   ,"where policy_no = #{policyNo,jdbcType=VARCHAR}"
	   ,"and endorse_no =  #{endorseNo,jdbcType=VARCHAR} "
	   ,"UNION "
	   ,"select 0 as amtDtl ,0 as premDtl, amt, prem "
	   ,"from fri_policy "
	   ,"where policy_no = #{policyNo,jdbcType=VARCHAR}"
	   ,"and endorse_no =#{endorseNo,jdbcType=VARCHAR}"	
	   , "</script>"})
       List<Rin1304CheckAmtPremRespVO> checkAmtPrem(@Param("policyNo")String policyNo,@Param("endorseNo") String endorseNo);
   
  
}